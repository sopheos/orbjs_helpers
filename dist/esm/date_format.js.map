{"version":3,"file":"date_format.js","names":["dateFormatAgo","value","date","Date","Number","isNaN","getTime","Intl","RelativeTimeFormat","options","dateStyle","toLocaleString","now","deltaDays","Math","max","round","relativeFormatter","numeric","format","oneMonthAgo","setMonth","getMonth","concat","dateFormatter","DateTimeFormat","overOneMonthAgo","dateTimeFormatAgo","displayTime","arguments","length","undefined","timeStyle","deltaSeconds","deltaMinutes","deltaHours","timeFormatter","output","dateFormatterOptions"],"sources":["../../src/date_format.ts"],"sourcesContent":["/**\n * Format date to display a readable string in French\n * The return value is relative to the current time using Intl API\n * If older than two days but less than one month, display the number of days\n * If older than a month, display the date\n * Date must be in the past, if not it will be formatted to the current date\n *\n * @param {string} value date string to format\n * @return the formatted date string\n */\nexport function dateFormatAgo(value: string): string {\n  const date = new Date(value);\n\n  // If date is not a valid Date object, return an empty string\n  if (!(date instanceof Date) || Number.isNaN(date.getTime())) {\n    return '';\n  }\n\n  // Check browser compatibility\n  // If no available, return the date formated\n  if (!Intl || (!Intl.RelativeTimeFormat && typeof Intl.RelativeTimeFormat !== 'function')) {\n    const options: Intl.DateTimeFormatOptions = {\n      dateStyle: 'long'\n    }\n\n    return date.toLocaleString('fr-FR', options);\n  }\n\n  const now = new Date();\n  const deltaDays = Math.max(Math.round((now.getTime() - date.getTime()) / 86400000), 0);\n  const relativeFormatter = new Intl.RelativeTimeFormat('fr-FR', { numeric: 'auto' });\n\n  // Today, yesterday or two days ago\n  if (deltaDays >= 0 && deltaDays <= 2) {\n    return relativeFormatter.format(-deltaDays, 'day');\n  }\n\n  const oneMonthAgo = new Date();\n  oneMonthAgo.setMonth(now.getMonth() - 1);\n\n  // Less than a month\n  if (date > oneMonthAgo) {\n    return `${deltaDays} jours`;\n  }\n\n  // More than one month\n  const dateFormatter = Intl.DateTimeFormat('fr-FR', { dateStyle: 'long' });\n  const overOneMonthAgo = dateFormatter.format(date);\n  return `le ${overOneMonthAgo}`;\n}\n\n/**\n * Format date or datetime to display a readable string in French\n * The return value is relative to the current time using Intl API\n * If older than a month, display the date (and time if displayTime is true)\n * Date must be in the past, if not it will be formatted to the current time\n *\n * @param {string} value date(time) string to format\n * @param {boolean} displayTime boolean display time when the day is before today\n * @return the formatted date(time) string\n */\nexport function dateTimeFormatAgo(value: string, displayTime: boolean = false): string {\n  const date = new Date(value);\n\n  // If date is not a valid Date object, return an empty string\n  if (!(date instanceof Date) || Number.isNaN(date.getTime())) {\n    return '';\n  }\n\n  const now = new Date();\n\n  // Check browser compatibility\n  // If no available, return the date formated\n  if (!Intl || !Intl.RelativeTimeFormat && typeof Intl.RelativeTimeFormat !== 'function') {\n    const options: Intl.DateTimeFormatOptions = {\n      dateStyle: 'long'\n    }\n\n    if (displayTime) {\n      options.timeStyle = 'short'\n    }\n\n    return date.toLocaleString('fr-FR', options);\n  }\n\n  const relativeFormatter = new Intl.RelativeTimeFormat('fr-FR', { numeric: 'auto' });\n\n  const deltaSeconds = Math.max(Math.round((now.getTime() - date.getTime()) / 1000), 0);\n\n  // Less than a minute\n  if (deltaSeconds <= 60) {\n    return relativeFormatter.format(-deltaSeconds, 'second');\n  }\n\n  const deltaMinutes = Math.round(deltaSeconds / 60);\n\n  // Less than an hour\n  if (deltaMinutes < 60) {\n    return relativeFormatter.format(-deltaMinutes, 'minute');\n  }\n\n  const deltaHours = Math.round(deltaMinutes / 60);\n\n  // Less than a day\n  if (deltaHours < 24) {\n    return relativeFormatter.format(-deltaHours, 'hour');\n  }\n\n  const oneMonthAgo = new Date();\n  oneMonthAgo.setMonth(now.getMonth() - 1);\n\n  const timeFormatter = Intl.DateTimeFormat('fr-FR', {\n    timeStyle: 'short'\n  });\n\n  const deltaDays = Math.round(deltaHours / 24);\n\n  // Less than a month\n  if (date > oneMonthAgo) {\n    let output = relativeFormatter.format(-deltaDays, 'day');\n\n    // Is yesterday or displayTime is set to true : display time\n    if (deltaDays < 2 || displayTime) {\n      output += ` Ã  ${timeFormatter.format(date)}`;\n    }\n    return output;\n  }\n\n  // Older than a month, display the date (not relative)\n  const dateFormatterOptions: Intl.DateTimeFormatOptions = {\n    dateStyle: 'long',\n  };\n\n  if (displayTime) {\n    dateFormatterOptions.timeStyle = 'short';\n  }\n\n  const dateFormatter = Intl.DateTimeFormat('fr-FR', dateFormatterOptions);\n\n  return `le ${dateFormatter.format(date)}`;\n}\n"],"mappings":"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","ignoreList":[]}