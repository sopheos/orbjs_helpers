{"version":3,"file":"number_format.js","names":["numberFormat","value","precision","numberValue","parseFloat","toPrecision","units","unit","nbNumbers","Math","floor","log10","concat"],"sources":["../../src/number_format.ts"],"sourcesContent":["\n  /**\n   * @param {number|string} value\n   * @param {number} precision\n   * @returns {number}\n   */\n  export function numberFormat(value: number|string, precision: number): number {\n    const numberValue = typeof value === 'number' ? value : parseFloat(value);\n    return parseFloat((numberValue).toPrecision(precision));\n  }\n\n  /**\n   * @param {number} value\n   * @param {string} unit\n   * @returns {string}\n   */\n  export function units(value: number, unit: string): string {\n    const nbNumbers = Math.floor(Math.log10(value)) + 1;\n\n    if (nbNumbers <= 3) {\n      return `${value} ${unit}`;\n    }\n\n    if (nbNumbers <= 6) {\n      return `${value / 1000} k${unit}`;\n    }\n\n    if (nbNumbers <= 9) {\n      return `${value / 1000000} M${unit}`;\n    }\n\n    if (nbNumbers <= 12) {\n      return `${value / 1000000000} G${unit}`;\n    }\n\n    return `${value / 1000000000000} T${unit}`;\n  }\n"],"mappings":"AACE;AACF;AACA;AACA;AACA;AACE,OAAO,SAASA,YAAYA,CAACC,KAAoB,EAAEC,SAAiB,EAAU;EAC5E,IAAMC,WAAW,GAAG,OAAOF,KAAK,KAAK,QAAQ,GAAGA,KAAK,GAAGG,UAAU,CAACH,KAAK,CAAC;EACzE,OAAOG,UAAU,CAAED,WAAW,CAAEE,WAAW,CAACH,SAAS,CAAC,CAAC;AACzD;;AAEA;AACF;AACA;AACA;AACA;AACE,OAAO,SAASI,KAAKA,CAACL,KAAa,EAAEM,IAAY,EAAU;EACzD,IAAMC,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,KAAK,CAACV,KAAK,CAAC,CAAC,GAAG,CAAC;EAEnD,IAAIO,SAAS,IAAI,CAAC,EAAE;IAClB,UAAAI,MAAA,CAAUX,KAAK,OAAAW,MAAA,CAAIL,IAAI;EACzB;EAEA,IAAIC,SAAS,IAAI,CAAC,EAAE;IAClB,UAAAI,MAAA,CAAUX,KAAK,GAAG,IAAI,QAAAW,MAAA,CAAKL,IAAI;EACjC;EAEA,IAAIC,SAAS,IAAI,CAAC,EAAE;IAClB,UAAAI,MAAA,CAAUX,KAAK,GAAG,OAAO,QAAAW,MAAA,CAAKL,IAAI;EACpC;EAEA,IAAIC,SAAS,IAAI,EAAE,EAAE;IACnB,UAAAI,MAAA,CAAUX,KAAK,GAAG,UAAU,QAAAW,MAAA,CAAKL,IAAI;EACvC;EAEA,UAAAK,MAAA,CAAUX,KAAK,GAAG,aAAa,QAAAW,MAAA,CAAKL,IAAI;AAC1C","ignoreList":[]}